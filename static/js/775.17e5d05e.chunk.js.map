{"version":3,"file":"static/js/775.17e5d05e.chunk.js","mappings":"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","sources":["components/movieList/movieList.jsx","components/moviesByQuery/moviesByQuery.jsx","pages/movies.jsx","services/services.jsx"],"sourcesContent":["import { Link, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nconst MovieList = ({\n  movie: { id, poster_path, original_title, original_name, title, name },\n}) => {\n  const location = useLocation();\n\n  return (\n    <li>\n      {location.pathname.includes(id) ? (\n        <img\n          src={\n            poster_path\n              ? `https://image.tmdb.org/t/p/w300${poster_path}`\n              : 'https://dummyimage.com/300x450/616161/b5b5b5.jpg&text=Image+is+not+available'\n          }\n          alt={original_title ?? original_name}\n        />\n      ) : (\n        <Link to={`/goit-react-hw-05-movies/movies/${id}`}>\n          <img\n            src={\n              poster_path\n                ? `https://image.tmdb.org/t/p/w300${poster_path}`\n                : 'https://dummyimage.com/300x450/616161/b5b5b5.jpg&text=Image+is+not+available'\n            }\n            alt={original_title ?? original_name}\n          />\n        </Link>\n      )}\n      <p>{title ?? name}</p>\n    </li>\n  );\n};\n\nMovieList.propTypes = {\n  movie: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    poster_path: PropTypes.string,\n    original_title: PropTypes.string,\n    original_name: PropTypes.string,\n    title: PropTypes.string,\n    name: PropTypes.string,\n  }).isRequired,\n};\n\nexport default MovieList;\n","import { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { getMovieByQuery } from 'services/services';\nimport MovieList from 'components/movieList/movieList';\n\nconst MoviesByQuery = () => {\n  const [movies, setMovies] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const queryParam = searchParams.get('query') ?? '';\n\n  useEffect(() => {\n    const fetchMovieByQuery = async () => {\n      try {\n        const data = await getMovieByQuery(queryParam);\n        setMovies(data);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n    fetchMovieByQuery();\n  }, [queryParam, searchParams]);\n\n  const updateQueryString = e => {\n    const nextParams = e.target.value !== '' ? { query: e.target.value } : {};\n    return setSearchParams(nextParams);\n  };\n\n  return (\n    <>\n      <label>\n        <input\n          style={{ marginLeft: '16px' }}\n          type=\"text\"\n          value={queryParam}\n          onChange={updateQueryString}\n        />\n      </label>\n      <ul style={{ minHeight: '100vw' }}>\n        {movies.map(movie => (\n          <MovieList key={movie.id} movie={movie} />\n        ))}\n      </ul>\n    </>\n  );\n};\n\nexport default MoviesByQuery;\n","import MoviesByQuery from 'components/moviesByQuery/moviesByQuery';\n\nconst Movies = () => {\n  return <MoviesByQuery />;\n};\n\nexport default Movies;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nconst options = {\n  method: 'GET',\n  params: { include_adult: 'false', language: 'en-US' },\n  headers: {\n    accept: 'application/json',\n    Authorization:\n      'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIxN2IyOGI2N2ZhY2YwZGUwZGVhMWI1YzIwYjQzODJmYiIsInN1YiI6IjY0OGE4NjRkMjYzNDYyMDE0ZTU2MDkxYSIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.IGRpPwwg9WreG7ODGxMmPXdHj3eBwMPKy6uxkDfpKQ4',\n  },\n};\n\nexport async function getDayTrendMovies() {\n  const { data } = await axios('trending/all/day?', options);\n  return data.results;\n}\n\nexport async function getMovieByQuery(query, page = 1) {\n  const { data } = await axios(\n    `search/movie?query=${query}&page=${page}`,\n    options\n  );\n  return data.results;\n}\n\nexport async function getMovieDetails(id) {\n  const { data } = await axios(`movie/${id}`, options);\n  return data;\n}\n\nexport async function getMovieCast(id) {\n  const { data } = await axios(`movie/${id}/credits`, options);\n  return data;\n}\n\nexport async function getMovieReviews(id, page = 1) {\n  const { data } = await axios(`movie/${id}/reviews?page=${page}`, options);\n  return data;\n}\n"],"names":["movie","id","poster_path","original_title","original_name","title","name","location","useLocation","pathname","includes","src","alt","to","useState","movies","setMovies","useSearchParams","searchParams","setSearchParams","queryParam","get","useEffect","fetchMovieByQuery","getMovieByQuery","data","console","log","style","marginLeft","type","value","onChange","e","nextParams","target","query","minHeight","map","axios","options","method","params","include_adult","language","headers","accept","Authorization","getDayTrendMovies","results","page","getMovieDetails","getMovieCast","getMovieReviews"],"sourceRoot":""}