{"version":3,"file":"static/js/407.0951943f.chunk.js","mappings":"oKAgDA,IA7CkB,SAAC,GAEZ,IAAD,IADJA,MAASC,EACL,EADKA,GAAIC,EACT,EADSA,YAAaC,EACtB,EADsBA,eAAgBC,EACtC,EADsCA,cAAeC,EACrD,EADqDA,MAAOC,EAC5D,EAD4DA,KAE1DC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,0BACGC,QAAQC,IAAIT,GACZM,EAASI,SAASC,SAASX,IAC1B,gBACEY,IACEX,EAAW,yCAC2BA,GAClC,+EAENY,IAAG,OAAEX,QAAF,IAAEA,EAAAA,EAAkBC,KAGzB,SAAC,KAAD,CAAMW,GAAE,0CAAqCd,GAA7C,UACE,gBACEY,IACEX,EAAW,yCAC2BA,GAClC,+EAENY,IAAG,OAAEX,QAAF,IAAEA,EAAAA,EAAkBC,OAI7B,8BAAIC,QAAJ,IAAIA,EAAAA,EAASC,MAGlB,C,gKCAD,EA9BgB,WACd,OAA0BU,EAAAA,EAAAA,UAAS,CAAC,GAApC,eAAOhB,EAAP,KAAciB,EAAd,KAEQC,GAAYC,EAAAA,EAAAA,MAAZD,QAcR,OAZAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAiB,mCAAG,8GAEHC,EAAAA,EAAAA,IAAgBJ,GAFb,OAEhBK,EAFgB,OAGtBN,EAASM,GAHa,gDAKtBd,QAAQC,IAAR,MALsB,yDAAH,qDASvBW,GACD,GAAE,CAACH,KAEF,iBAAKM,MAAO,CAAEC,YAAa,QAA3B,WACE,oCACA,SAAC,IAAD,CAAWzB,MAAOA,KAClB,SAAC,KAAD,CAAMwB,MAAO,CAAEE,YAAa,QAAUX,GAAG,OAAzC,mBAGA,SAAC,KAAD,CAAMA,GAAG,UAAT,sBACA,SAAC,KAAD,MAGL,EC3BD,EAJqB,WACnB,OAAO,SAAC,EAAD,GACR,C,+LCFDY,EAAAA,EAAAA,SAAAA,QAAyB,gCAEzB,IAAMC,EAAU,CACdC,OAAQ,MACRC,OAAQ,CAAEC,cAAe,QAASC,SAAU,SAC5CC,QAAS,CACPC,OAAQ,mBACRC,cACE,+NAIC,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,uGACkBT,EAAAA,EAAAA,GAAM,oBAAqBC,GAD7C,uBACGL,EADH,EACGA,KADH,kBAEEA,EAAKc,SAFP,kEAKA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA+BC,GAA/B,8FAAsCC,EAAtC,+BAA6C,EAA7C,UACkBb,EAAAA,EAAAA,GAAM,sBAAD,OACJY,EADI,iBACUC,GACpCZ,GAHG,uBACGL,EADH,EACGA,KADH,kBAKEA,EAAKc,SALP,mEAQA,SAAef,EAAtB,+CAAO,OAAP,oBAAO,WAA+BrB,GAA/B,0FACkB0B,EAAAA,EAAAA,GAAM,SAAD,OAAU1B,GAAM2B,GADvC,uBACGL,EADH,EACGA,KADH,kBAEEA,GAFF,kEAKA,SAAekB,EAAtB,+CAAO,OAAP,oBAAO,WAA4BxC,GAA5B,0FACkB0B,EAAAA,EAAAA,GAAM,SAAD,OAAU1B,EAAV,YAAwB2B,GAD/C,uBACGL,EADH,EACGA,KADH,kBAEEA,GAFF,kEAKA,SAAemB,EAAtB,+CAAO,OAAP,oBAAO,WAA+BzC,GAA/B,8FAAmCuC,EAAnC,+BAA0C,EAA1C,UACkBb,EAAAA,EAAAA,GAAM,SAAD,OAAU1B,EAAV,yBAA6BuC,GAAQZ,GAD5D,uBACGL,EADH,EACGA,KADH,kBAEEA,GAFF,mE","sources":["components/movieList/movieList.jsx","components/details/details.jsx","pages/movieDetails.jsx","services/services.jsx"],"sourcesContent":["import { Link, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nconst MovieList = ({\n  movie: { id, poster_path, original_title, original_name, title, name },\n}) => {\n  const location = useLocation();\n\n  return (\n    <li>\n      {console.log(id)}\n      {location.pathname.includes(id) ? (\n        <img\n          src={\n            poster_path\n              ? `https://image.tmdb.org/t/p/w300${poster_path}`\n              : 'https://dummyimage.com/300x450/616161/b5b5b5.jpg&text=Image+is+not+available'\n          }\n          alt={original_title ?? original_name}\n        />\n      ) : (\n        <Link to={`/goit-react-hw-05-movies/movies/${id}`}>\n          <img\n            src={\n              poster_path\n                ? `https://image.tmdb.org/t/p/w300${poster_path}`\n                : 'https://dummyimage.com/300x450/616161/b5b5b5.jpg&text=Image+is+not+available'\n            }\n            alt={original_title ?? original_name}\n          />\n        </Link>\n      )}\n      <p>{title ?? name}</p>\n    </li>\n  );\n};\n\nMovieList.propTypes = {\n  movie: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    poster_path: PropTypes.string,\n    original_title: PropTypes.string,\n    original_name: PropTypes.string,\n    title: PropTypes.string,\n    name: PropTypes.string,\n  }).isRequired,\n};\n\nexport default MovieList;\n","import { getMovieDetails } from 'services/services';\nimport { useState, useEffect } from 'react';\nimport { useParams, Link, Outlet } from 'react-router-dom';\nimport MovieList from 'components/movieList/movieList';\n\nconst Details = () => {\n  const [movie, setMovie] = useState({});\n\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const fetchMovieDetails = async () => {\n      try {\n        const data = await getMovieDetails(movieId);\n        setMovie(data);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    fetchMovieDetails();\n  }, [movieId]);\n  return (\n    <div style={{ paddingLeft: '16px' }}>\n      <p>Details</p>\n      <MovieList movie={movie} />\n      <Link style={{ marginRight: '16px' }} to=\"cast\">\n        Cast\n      </Link>\n      <Link to=\"reviews\">Reviews</Link>\n      <Outlet />\n    </div>\n  );\n};\n\nexport default Details;\n","import Details from 'components/details/details';\n\nconst MovieDetails = () => {\n  return <Details />;\n};\n\nexport default MovieDetails;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nconst options = {\n  method: 'GET',\n  params: { include_adult: 'false', language: 'en-US' },\n  headers: {\n    accept: 'application/json',\n    Authorization:\n      'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIxN2IyOGI2N2ZhY2YwZGUwZGVhMWI1YzIwYjQzODJmYiIsInN1YiI6IjY0OGE4NjRkMjYzNDYyMDE0ZTU2MDkxYSIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.IGRpPwwg9WreG7ODGxMmPXdHj3eBwMPKy6uxkDfpKQ4',\n  },\n};\n\nexport async function getDayTrendMovies() {\n  const { data } = await axios('trending/all/day?', options);\n  return data.results;\n}\n\nexport async function getMovieByQuery(query, page = 1) {\n  const { data } = await axios(\n    `search/movie?query=${query}&page=${page}`,\n    options\n  );\n  return data.results;\n}\n\nexport async function getMovieDetails(id) {\n  const { data } = await axios(`movie/${id}`, options);\n  return data;\n}\n\nexport async function getMovieCast(id) {\n  const { data } = await axios(`movie/${id}/credits`, options);\n  return data;\n}\n\nexport async function getMovieReviews(id, page = 1) {\n  const { data } = await axios(`movie/${id}/reviews?page=${page}`, options);\n  return data;\n}\n"],"names":["movie","id","poster_path","original_title","original_name","title","name","location","useLocation","console","log","pathname","includes","src","alt","to","useState","setMovie","movieId","useParams","useEffect","fetchMovieDetails","getMovieDetails","data","style","paddingLeft","marginRight","axios","options","method","params","include_adult","language","headers","accept","Authorization","getDayTrendMovies","results","getMovieByQuery","query","page","getMovieCast","getMovieReviews"],"sourceRoot":""}